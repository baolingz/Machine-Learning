{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import urllib\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import csv\n",
    "import geopandas as gpd\n",
    "from shapely.geometry import Point\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "import fiona\n",
    "from __future__ import division"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Reading in the turnstile data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1 = pd.read_csv(\"http://web.mta.info/developers/data/nyct/turnstile/turnstile_170701.txt\") \n",
    "df2 = pd.read_csv(\"http://web.mta.info/developers/data/nyct/turnstile/turnstile_170708.txt\")\n",
    "df3 = pd.read_csv(\"http://web.mta.info/developers/data/nyct/turnstile/turnstile_170715.txt\")\n",
    "df4 = pd.read_csv(\"http://web.mta.info/developers/data/nyct/turnstile/turnstile_170722.txt\")\n",
    "df5 = pd.read_csv(\"http://web.mta.info/developers/data/nyct/turnstile/turnstile_170729.txt\")\n",
    "df6 = pd.read_csv(\"http://web.mta.info/developers/data/nyct/turnstile/turnstile_170805.txt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>C/A</th>\n",
       "      <th>UNIT</th>\n",
       "      <th>SCP</th>\n",
       "      <th>STATION</th>\n",
       "      <th>LINENAME</th>\n",
       "      <th>DIVISION</th>\n",
       "      <th>DATE</th>\n",
       "      <th>TIME</th>\n",
       "      <th>DESC</th>\n",
       "      <th>ENTRIES</th>\n",
       "      <th>EXITS</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>A002</td>\n",
       "      <td>R051</td>\n",
       "      <td>02-00-00</td>\n",
       "      <td>59 ST</td>\n",
       "      <td>NQR456W</td>\n",
       "      <td>BMT</td>\n",
       "      <td>06/24/2017</td>\n",
       "      <td>00:00:00</td>\n",
       "      <td>REGULAR</td>\n",
       "      <td>6233682</td>\n",
       "      <td>2110437</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>A002</td>\n",
       "      <td>R051</td>\n",
       "      <td>02-00-00</td>\n",
       "      <td>59 ST</td>\n",
       "      <td>NQR456W</td>\n",
       "      <td>BMT</td>\n",
       "      <td>06/24/2017</td>\n",
       "      <td>04:00:00</td>\n",
       "      <td>REGULAR</td>\n",
       "      <td>6233696</td>\n",
       "      <td>2110445</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>A002</td>\n",
       "      <td>R051</td>\n",
       "      <td>02-00-00</td>\n",
       "      <td>59 ST</td>\n",
       "      <td>NQR456W</td>\n",
       "      <td>BMT</td>\n",
       "      <td>06/24/2017</td>\n",
       "      <td>08:00:00</td>\n",
       "      <td>REGULAR</td>\n",
       "      <td>6233712</td>\n",
       "      <td>2110473</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>A002</td>\n",
       "      <td>R051</td>\n",
       "      <td>02-00-00</td>\n",
       "      <td>59 ST</td>\n",
       "      <td>NQR456W</td>\n",
       "      <td>BMT</td>\n",
       "      <td>06/24/2017</td>\n",
       "      <td>12:00:00</td>\n",
       "      <td>REGULAR</td>\n",
       "      <td>6233790</td>\n",
       "      <td>2110560</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>A002</td>\n",
       "      <td>R051</td>\n",
       "      <td>02-00-00</td>\n",
       "      <td>59 ST</td>\n",
       "      <td>NQR456W</td>\n",
       "      <td>BMT</td>\n",
       "      <td>06/24/2017</td>\n",
       "      <td>16:00:00</td>\n",
       "      <td>REGULAR</td>\n",
       "      <td>6233942</td>\n",
       "      <td>2110622</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    C/A  UNIT       SCP STATION LINENAME DIVISION        DATE      TIME  \\\n",
       "0  A002  R051  02-00-00   59 ST  NQR456W      BMT  06/24/2017  00:00:00   \n",
       "1  A002  R051  02-00-00   59 ST  NQR456W      BMT  06/24/2017  04:00:00   \n",
       "2  A002  R051  02-00-00   59 ST  NQR456W      BMT  06/24/2017  08:00:00   \n",
       "3  A002  R051  02-00-00   59 ST  NQR456W      BMT  06/24/2017  12:00:00   \n",
       "4  A002  R051  02-00-00   59 ST  NQR456W      BMT  06/24/2017  16:00:00   \n",
       "\n",
       "      DESC  ENTRIES  \\\n",
       "0  REGULAR  6233682   \n",
       "1  REGULAR  6233696   \n",
       "2  REGULAR  6233712   \n",
       "3  REGULAR  6233790   \n",
       "4  REGULAR  6233942   \n",
       "\n",
       "   EXITS                                                                 \n",
       "0                                            2110437                     \n",
       "1                                            2110445                     \n",
       "2                                            2110473                     \n",
       "3                                            2110560                     \n",
       "4                                            2110622                     "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "total = pd.concat([df1,df2,df3,df4,df5,df6])\n",
    "total.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#Sorting by UNIT, SCP, DATE, TIME\n",
    "#total = total.sort_values(by=['UNIT','SCP','DATE','TIME'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Removing unneccesary spaces from 'EXITS                  ' column\n",
    "total.columns = ['C/A', 'UNIT', 'SCP', 'STATION', 'LINENAME', 'DIVISION', 'DATE', 'TIME',\n",
    "       'DESC', 'ENTRIES',\n",
    "       'EXITS']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Taking relevant data\n",
    "data = total[['C/A','UNIT','SCP', 'DATE','TIME','ENTRIES','EXITS']]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Group by SCP and get individual counts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "@author: shreya (ssb602)\n",
    "\n",
    "\"\"\"\n",
    "# Getting values of SCP (turnstile) in a list\n",
    "SCP = []\n",
    "data_scp = data.groupby(['SCP'])\n",
    "for name,group in data_scp:\n",
    "    SCP.append(name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function to calculate individual counts for each SCP\n",
    "def get_individual_counts(df):\n",
    "    \"\"\"\n",
    "    Calculates individual counts from cumulative counts\n",
    "    \n",
    "    Args: Dataframe for ach turnstile\n",
    "    \n",
    "    Returns: Dataframe with individual counts\n",
    "    \"\"\"\n",
    "    entries = df.ENTRIES.tolist()\n",
    "    exits = df.EXITS.tolist()\n",
    "    \n",
    "    if (len(entries)> 1) and (len(exits)> 1): # As some SCPs have only single values or too less values\n",
    "                                                  # Need to resolve this issue\n",
    "    \n",
    "        entries_individual = []\n",
    "        entries_individual.append(0)\n",
    "        for i in range(1,len(entries)-1):\n",
    "            entries_individual.append(entries[i]-entries[i-1])\n",
    "        entries_individual.append(0)\n",
    "\n",
    "        exits_individual = []\n",
    "        exits_individual.append(0)\n",
    "        for i in range(1,len(exits)-1):\n",
    "            exits_individual.append(exits[i]-exits[i-1])\n",
    "        exits_individual.append(0)\n",
    "\n",
    "        ## checking for length of indivudual counts to be equal to length of entries column\n",
    "        assert len(entries_individual) == len(entries)\n",
    "\n",
    "        ## checking for length of indivudual counts to be equal to length of exits column\n",
    "        assert len(exits_individual) == len(exits)\n",
    "\n",
    "        ## Adding the individual counts back to the dataframe\n",
    "        entries_se = pd.Series(entries_individual)\n",
    "        exits_se = pd.Series(exits_individual)\n",
    "        ## Creating new columns\n",
    "        df['entries_new'] = entries_se.values\n",
    "        df['exits_new'] = exits_se.values\n",
    "    \n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/envs/GIS/lib/python2.7/site-packages/ipykernel_launcher.py:38: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "/anaconda3/envs/GIS/lib/python2.7/site-packages/ipykernel_launcher.py:39: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n"
     ]
    }
   ],
   "source": [
    "# Processing for each SCP(turnstile) get individual counts\n",
    "data_individual_counts = pd.DataFrame()\n",
    "for scp in SCP:\n",
    "    data_by_scp = data_scp.get_group(scp)\n",
    "    data_individual_counts = data_individual_counts.append(get_individual_counts(data_by_scp))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>C/A</th>\n",
       "      <th>DATE</th>\n",
       "      <th>ENTRIES</th>\n",
       "      <th>EXITS</th>\n",
       "      <th>SCP</th>\n",
       "      <th>TIME</th>\n",
       "      <th>UNIT</th>\n",
       "      <th>entries_new</th>\n",
       "      <th>exits_new</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>191676</th>\n",
       "      <td>R633</td>\n",
       "      <td>07/13/2017</td>\n",
       "      <td>6354927</td>\n",
       "      <td>7378313</td>\n",
       "      <td>00-00-C6</td>\n",
       "      <td>08:00:00</td>\n",
       "      <td>R068</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         C/A        DATE  ENTRIES    EXITS       SCP      TIME  UNIT  \\\n",
       "191676  R633  07/13/2017  6354927  7378313  00-00-C6  08:00:00  R068   \n",
       "\n",
       "        entries_new  exits_new  \n",
       "191676          NaN        NaN  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Single entry for SCP == '00-00-C6'\n",
    "data_individual_counts[data_individual_counts['SCP'] == '00-00-C6']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Saving Point 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_individual_counts.to_csv(\"MTA_data_individual_counts.csv\")\n",
    "data_individual_counts = pd.read_csv(\"MTA_data_individual_counts.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Removing entries with negative counts (edited code here to include June and August)\n",
    "data_individual_counts_nonnegative = data_individual_counts[(data_individual_counts.entries_new>=0) &\\\n",
    "                                                                     (data_individual_counts.exits_new>=0)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.96565010671%\n"
     ]
    }
   ],
   "source": [
    "print(str(100*len(data_individual_counts[(data_individual_counts.entries_new<0)])/(len(data_individual_counts)))+'%')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Analysing negative values\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Removing June and August Entries\n",
    "data_individual_counts_July = data_individual_counts[(data_individual_counts['DATE'] >= '07/01/2017') &\\\n",
    "                                                     (data_individual_counts['DATE'] < '08/01/2017')]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>C/A</th>\n",
       "      <th>DATE</th>\n",
       "      <th>ENTRIES</th>\n",
       "      <th>EXITS</th>\n",
       "      <th>SCP</th>\n",
       "      <th>TIME</th>\n",
       "      <th>UNIT</th>\n",
       "      <th>entries_new</th>\n",
       "      <th>exits_new</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>551</th>\n",
       "      <td>A006</td>\n",
       "      <td>07/01/2017</td>\n",
       "      <td>2907077</td>\n",
       "      <td>4959065</td>\n",
       "      <td>00-00-00</td>\n",
       "      <td>02:00:00</td>\n",
       "      <td>R079</td>\n",
       "      <td>-843666.0</td>\n",
       "      <td>4906003.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1145</th>\n",
       "      <td>A010</td>\n",
       "      <td>07/01/2017</td>\n",
       "      <td>2516942</td>\n",
       "      <td>1033358</td>\n",
       "      <td>00-00-00</td>\n",
       "      <td>00:00:00</td>\n",
       "      <td>R080</td>\n",
       "      <td>-398606.0</td>\n",
       "      <td>-3939574.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3928</th>\n",
       "      <td>A029</td>\n",
       "      <td>07/01/2017</td>\n",
       "      <td>3756108</td>\n",
       "      <td>13042316</td>\n",
       "      <td>00-00-00</td>\n",
       "      <td>00:00:00</td>\n",
       "      <td>R082</td>\n",
       "      <td>-7509253.0</td>\n",
       "      <td>9278707.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5414</th>\n",
       "      <td>A035</td>\n",
       "      <td>07/01/2017</td>\n",
       "      <td>782105</td>\n",
       "      <td>2140820</td>\n",
       "      <td>00-00-00</td>\n",
       "      <td>01:00:00</td>\n",
       "      <td>R170</td>\n",
       "      <td>-4919195.0</td>\n",
       "      <td>-704930.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7193</th>\n",
       "      <td>A046</td>\n",
       "      <td>07/01/2017</td>\n",
       "      <td>3698774</td>\n",
       "      <td>354336</td>\n",
       "      <td>00-00-00</td>\n",
       "      <td>01:00:00</td>\n",
       "      <td>R463</td>\n",
       "      <td>-366504904.0</td>\n",
       "      <td>-454018867.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8943</th>\n",
       "      <td>A050</td>\n",
       "      <td>07/01/2017</td>\n",
       "      <td>3775981</td>\n",
       "      <td>5370524</td>\n",
       "      <td>00-00-00</td>\n",
       "      <td>01:00:00</td>\n",
       "      <td>R088</td>\n",
       "      <td>-3077009.0</td>\n",
       "      <td>1233947.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9898</th>\n",
       "      <td>A055</td>\n",
       "      <td>07/01/2017</td>\n",
       "      <td>962037</td>\n",
       "      <td>331390</td>\n",
       "      <td>00-00-00</td>\n",
       "      <td>00:00:00</td>\n",
       "      <td>R227</td>\n",
       "      <td>-2815755.0</td>\n",
       "      <td>-5041250.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11031</th>\n",
       "      <td>A064</td>\n",
       "      <td>07/01/2017</td>\n",
       "      <td>4921806</td>\n",
       "      <td>3522946</td>\n",
       "      <td>00-00-00</td>\n",
       "      <td>00:00:00</td>\n",
       "      <td>R311</td>\n",
       "      <td>-6527501.0</td>\n",
       "      <td>-7390231.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11158</th>\n",
       "      <td>A066</td>\n",
       "      <td>07/01/2017</td>\n",
       "      <td>1726406605</td>\n",
       "      <td>1762181972</td>\n",
       "      <td>00-00-00</td>\n",
       "      <td>05:00:00</td>\n",
       "      <td>R118</td>\n",
       "      <td>-53.0</td>\n",
       "      <td>38.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11159</th>\n",
       "      <td>A066</td>\n",
       "      <td>07/01/2017</td>\n",
       "      <td>1726406521</td>\n",
       "      <td>1762182108</td>\n",
       "      <td>00-00-00</td>\n",
       "      <td>09:00:00</td>\n",
       "      <td>R118</td>\n",
       "      <td>-84.0</td>\n",
       "      <td>136.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11160</th>\n",
       "      <td>A066</td>\n",
       "      <td>07/01/2017</td>\n",
       "      <td>1726406039</td>\n",
       "      <td>1762182420</td>\n",
       "      <td>00-00-00</td>\n",
       "      <td>13:00:00</td>\n",
       "      <td>R118</td>\n",
       "      <td>-482.0</td>\n",
       "      <td>312.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11161</th>\n",
       "      <td>A066</td>\n",
       "      <td>07/01/2017</td>\n",
       "      <td>1726404900</td>\n",
       "      <td>1762182757</td>\n",
       "      <td>00-00-00</td>\n",
       "      <td>17:00:00</td>\n",
       "      <td>R118</td>\n",
       "      <td>-1139.0</td>\n",
       "      <td>337.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11162</th>\n",
       "      <td>A066</td>\n",
       "      <td>07/01/2017</td>\n",
       "      <td>1726403809</td>\n",
       "      <td>1762183056</td>\n",
       "      <td>00-00-00</td>\n",
       "      <td>21:00:00</td>\n",
       "      <td>R118</td>\n",
       "      <td>-1091.0</td>\n",
       "      <td>299.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11163</th>\n",
       "      <td>A066</td>\n",
       "      <td>07/02/2017</td>\n",
       "      <td>1726403359</td>\n",
       "      <td>1762183280</td>\n",
       "      <td>00-00-00</td>\n",
       "      <td>01:00:00</td>\n",
       "      <td>R118</td>\n",
       "      <td>-450.0</td>\n",
       "      <td>224.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11164</th>\n",
       "      <td>A066</td>\n",
       "      <td>07/02/2017</td>\n",
       "      <td>1726403309</td>\n",
       "      <td>1762183315</td>\n",
       "      <td>00-00-00</td>\n",
       "      <td>05:00:00</td>\n",
       "      <td>R118</td>\n",
       "      <td>-50.0</td>\n",
       "      <td>35.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11165</th>\n",
       "      <td>A066</td>\n",
       "      <td>07/02/2017</td>\n",
       "      <td>1726403250</td>\n",
       "      <td>1762183457</td>\n",
       "      <td>00-00-00</td>\n",
       "      <td>09:00:00</td>\n",
       "      <td>R118</td>\n",
       "      <td>-59.0</td>\n",
       "      <td>142.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11166</th>\n",
       "      <td>A066</td>\n",
       "      <td>07/02/2017</td>\n",
       "      <td>1726402808</td>\n",
       "      <td>1762183792</td>\n",
       "      <td>00-00-00</td>\n",
       "      <td>13:00:00</td>\n",
       "      <td>R118</td>\n",
       "      <td>-442.0</td>\n",
       "      <td>335.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11167</th>\n",
       "      <td>A066</td>\n",
       "      <td>07/02/2017</td>\n",
       "      <td>1726401854</td>\n",
       "      <td>1762184261</td>\n",
       "      <td>00-00-00</td>\n",
       "      <td>17:00:00</td>\n",
       "      <td>R118</td>\n",
       "      <td>-954.0</td>\n",
       "      <td>469.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11168</th>\n",
       "      <td>A066</td>\n",
       "      <td>07/02/2017</td>\n",
       "      <td>1726400746</td>\n",
       "      <td>1762184689</td>\n",
       "      <td>00-00-00</td>\n",
       "      <td>21:00:00</td>\n",
       "      <td>R118</td>\n",
       "      <td>-1108.0</td>\n",
       "      <td>428.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11169</th>\n",
       "      <td>A066</td>\n",
       "      <td>07/03/2017</td>\n",
       "      <td>1726400287</td>\n",
       "      <td>1762184866</td>\n",
       "      <td>00-00-00</td>\n",
       "      <td>01:00:00</td>\n",
       "      <td>R118</td>\n",
       "      <td>-459.0</td>\n",
       "      <td>177.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11170</th>\n",
       "      <td>A066</td>\n",
       "      <td>07/03/2017</td>\n",
       "      <td>1726400264</td>\n",
       "      <td>1762184887</td>\n",
       "      <td>00-00-00</td>\n",
       "      <td>05:00:00</td>\n",
       "      <td>R118</td>\n",
       "      <td>-23.0</td>\n",
       "      <td>21.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11171</th>\n",
       "      <td>A066</td>\n",
       "      <td>07/03/2017</td>\n",
       "      <td>1726400163</td>\n",
       "      <td>1762185085</td>\n",
       "      <td>00-00-00</td>\n",
       "      <td>09:00:00</td>\n",
       "      <td>R118</td>\n",
       "      <td>-101.0</td>\n",
       "      <td>198.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11172</th>\n",
       "      <td>A066</td>\n",
       "      <td>07/03/2017</td>\n",
       "      <td>1726399659</td>\n",
       "      <td>1762185439</td>\n",
       "      <td>00-00-00</td>\n",
       "      <td>13:00:00</td>\n",
       "      <td>R118</td>\n",
       "      <td>-504.0</td>\n",
       "      <td>354.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11173</th>\n",
       "      <td>A066</td>\n",
       "      <td>07/03/2017</td>\n",
       "      <td>1726398336</td>\n",
       "      <td>1762185751</td>\n",
       "      <td>00-00-00</td>\n",
       "      <td>17:00:00</td>\n",
       "      <td>R118</td>\n",
       "      <td>-1323.0</td>\n",
       "      <td>312.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11174</th>\n",
       "      <td>A066</td>\n",
       "      <td>07/03/2017</td>\n",
       "      <td>1726397052</td>\n",
       "      <td>1762186059</td>\n",
       "      <td>00-00-00</td>\n",
       "      <td>21:00:00</td>\n",
       "      <td>R118</td>\n",
       "      <td>-1284.0</td>\n",
       "      <td>308.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11175</th>\n",
       "      <td>A066</td>\n",
       "      <td>07/04/2017</td>\n",
       "      <td>1726396632</td>\n",
       "      <td>1762186178</td>\n",
       "      <td>00-00-00</td>\n",
       "      <td>01:00:00</td>\n",
       "      <td>R118</td>\n",
       "      <td>-420.0</td>\n",
       "      <td>119.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11176</th>\n",
       "      <td>A066</td>\n",
       "      <td>07/04/2017</td>\n",
       "      <td>1726396603</td>\n",
       "      <td>1762186198</td>\n",
       "      <td>00-00-00</td>\n",
       "      <td>05:00:00</td>\n",
       "      <td>R118</td>\n",
       "      <td>-29.0</td>\n",
       "      <td>20.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11177</th>\n",
       "      <td>A066</td>\n",
       "      <td>07/04/2017</td>\n",
       "      <td>1726396542</td>\n",
       "      <td>1762186288</td>\n",
       "      <td>00-00-00</td>\n",
       "      <td>09:00:00</td>\n",
       "      <td>R118</td>\n",
       "      <td>-61.0</td>\n",
       "      <td>90.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11178</th>\n",
       "      <td>A066</td>\n",
       "      <td>07/04/2017</td>\n",
       "      <td>1726396219</td>\n",
       "      <td>1762186585</td>\n",
       "      <td>00-00-00</td>\n",
       "      <td>13:00:00</td>\n",
       "      <td>R118</td>\n",
       "      <td>-323.0</td>\n",
       "      <td>297.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11179</th>\n",
       "      <td>A066</td>\n",
       "      <td>07/04/2017</td>\n",
       "      <td>1726395376</td>\n",
       "      <td>1762186999</td>\n",
       "      <td>00-00-00</td>\n",
       "      <td>17:00:00</td>\n",
       "      <td>R118</td>\n",
       "      <td>-843.0</td>\n",
       "      <td>414.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>158514</th>\n",
       "      <td>R262B</td>\n",
       "      <td>07/01/2017</td>\n",
       "      <td>30343</td>\n",
       "      <td>7221</td>\n",
       "      <td>05-00-00</td>\n",
       "      <td>00:22:00</td>\n",
       "      <td>R195</td>\n",
       "      <td>-7258.0</td>\n",
       "      <td>-110016.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5485</th>\n",
       "      <td>A037</td>\n",
       "      <td>07/08/2017</td>\n",
       "      <td>23500</td>\n",
       "      <td>12641</td>\n",
       "      <td>05-00-00</td>\n",
       "      <td>01:00:00</td>\n",
       "      <td>R170</td>\n",
       "      <td>-7377.0</td>\n",
       "      <td>5225.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51002</th>\n",
       "      <td>N072</td>\n",
       "      <td>07/08/2017</td>\n",
       "      <td>37661</td>\n",
       "      <td>117297</td>\n",
       "      <td>05-00-00</td>\n",
       "      <td>00:00:00</td>\n",
       "      <td>R012</td>\n",
       "      <td>-16407.0</td>\n",
       "      <td>87366.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>159718</th>\n",
       "      <td>R262B</td>\n",
       "      <td>07/08/2017</td>\n",
       "      <td>30937</td>\n",
       "      <td>7436</td>\n",
       "      <td>05-00-00</td>\n",
       "      <td>00:22:00</td>\n",
       "      <td>R195</td>\n",
       "      <td>-8076.0</td>\n",
       "      <td>-116193.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51052</th>\n",
       "      <td>N072</td>\n",
       "      <td>07/15/2017</td>\n",
       "      <td>39061</td>\n",
       "      <td>123681</td>\n",
       "      <td>05-00-00</td>\n",
       "      <td>00:00:00</td>\n",
       "      <td>R012</td>\n",
       "      <td>-48344.0</td>\n",
       "      <td>76302.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>160462</th>\n",
       "      <td>R262B</td>\n",
       "      <td>07/15/2017</td>\n",
       "      <td>31268</td>\n",
       "      <td>7540</td>\n",
       "      <td>05-00-00</td>\n",
       "      <td>00:22:00</td>\n",
       "      <td>R195</td>\n",
       "      <td>-9165.0</td>\n",
       "      <td>-122681.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>52093</th>\n",
       "      <td>N072</td>\n",
       "      <td>07/22/2017</td>\n",
       "      <td>40494</td>\n",
       "      <td>130306</td>\n",
       "      <td>05-00-00</td>\n",
       "      <td>00:00:00</td>\n",
       "      <td>R012</td>\n",
       "      <td>-78272.0</td>\n",
       "      <td>66553.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>162676</th>\n",
       "      <td>R262B</td>\n",
       "      <td>07/22/2017</td>\n",
       "      <td>31300</td>\n",
       "      <td>7576</td>\n",
       "      <td>05-00-00</td>\n",
       "      <td>00:22:00</td>\n",
       "      <td>R195</td>\n",
       "      <td>-10748.0</td>\n",
       "      <td>-128455.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>52458</th>\n",
       "      <td>N072</td>\n",
       "      <td>07/29/2017</td>\n",
       "      <td>42123</td>\n",
       "      <td>136119</td>\n",
       "      <td>05-00-00</td>\n",
       "      <td>00:00:00</td>\n",
       "      <td>R012</td>\n",
       "      <td>-107109.0</td>\n",
       "      <td>56260.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>164573</th>\n",
       "      <td>R262B</td>\n",
       "      <td>07/29/2017</td>\n",
       "      <td>32072</td>\n",
       "      <td>7786</td>\n",
       "      <td>05-00-00</td>\n",
       "      <td>00:22:00</td>\n",
       "      <td>R195</td>\n",
       "      <td>-11720.0</td>\n",
       "      <td>-134632.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>158556</th>\n",
       "      <td>R262B</td>\n",
       "      <td>07/01/2017</td>\n",
       "      <td>535053</td>\n",
       "      <td>70530</td>\n",
       "      <td>05-00-01</td>\n",
       "      <td>00:22:00</td>\n",
       "      <td>R195</td>\n",
       "      <td>-5961572.0</td>\n",
       "      <td>-4733993.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>159760</th>\n",
       "      <td>R262B</td>\n",
       "      <td>07/08/2017</td>\n",
       "      <td>535818</td>\n",
       "      <td>70679</td>\n",
       "      <td>05-00-01</td>\n",
       "      <td>00:22:00</td>\n",
       "      <td>R195</td>\n",
       "      <td>-5966536.0</td>\n",
       "      <td>-4740713.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>160504</th>\n",
       "      <td>R262B</td>\n",
       "      <td>07/15/2017</td>\n",
       "      <td>536209</td>\n",
       "      <td>70743</td>\n",
       "      <td>05-00-01</td>\n",
       "      <td>00:22:00</td>\n",
       "      <td>R195</td>\n",
       "      <td>-5971825.0</td>\n",
       "      <td>-4747565.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>162718</th>\n",
       "      <td>R262B</td>\n",
       "      <td>07/22/2017</td>\n",
       "      <td>536307</td>\n",
       "      <td>70764</td>\n",
       "      <td>05-00-01</td>\n",
       "      <td>00:22:00</td>\n",
       "      <td>R195</td>\n",
       "      <td>-5977868.0</td>\n",
       "      <td>-4753603.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>164615</th>\n",
       "      <td>R262B</td>\n",
       "      <td>07/29/2017</td>\n",
       "      <td>537220</td>\n",
       "      <td>70924</td>\n",
       "      <td>05-00-01</td>\n",
       "      <td>00:22:00</td>\n",
       "      <td>R195</td>\n",
       "      <td>-5983090.0</td>\n",
       "      <td>-4759701.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>158598</th>\n",
       "      <td>R262B</td>\n",
       "      <td>07/01/2017</td>\n",
       "      <td>183183</td>\n",
       "      <td>63662</td>\n",
       "      <td>05-00-02</td>\n",
       "      <td>00:22:00</td>\n",
       "      <td>R195</td>\n",
       "      <td>-4943592.0</td>\n",
       "      <td>-1636539.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>159802</th>\n",
       "      <td>R262B</td>\n",
       "      <td>07/08/2017</td>\n",
       "      <td>184151</td>\n",
       "      <td>63983</td>\n",
       "      <td>05-00-02</td>\n",
       "      <td>00:22:00</td>\n",
       "      <td>R195</td>\n",
       "      <td>-4950049.0</td>\n",
       "      <td>-1640024.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>160546</th>\n",
       "      <td>R262B</td>\n",
       "      <td>07/15/2017</td>\n",
       "      <td>184620</td>\n",
       "      <td>64065</td>\n",
       "      <td>05-00-02</td>\n",
       "      <td>00:22:00</td>\n",
       "      <td>R195</td>\n",
       "      <td>-4957182.0</td>\n",
       "      <td>-1643831.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>162760</th>\n",
       "      <td>R262B</td>\n",
       "      <td>07/22/2017</td>\n",
       "      <td>184745</td>\n",
       "      <td>64104</td>\n",
       "      <td>05-00-02</td>\n",
       "      <td>00:22:00</td>\n",
       "      <td>R195</td>\n",
       "      <td>-4965332.0</td>\n",
       "      <td>-1647064.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>164657</th>\n",
       "      <td>R262B</td>\n",
       "      <td>07/29/2017</td>\n",
       "      <td>185934</td>\n",
       "      <td>64467</td>\n",
       "      <td>05-00-02</td>\n",
       "      <td>00:22:00</td>\n",
       "      <td>R195</td>\n",
       "      <td>-4972293.0</td>\n",
       "      <td>-1650049.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51353</th>\n",
       "      <td>N072</td>\n",
       "      <td>07/01/2017</td>\n",
       "      <td>7709411</td>\n",
       "      <td>1740564</td>\n",
       "      <td>05-00-03</td>\n",
       "      <td>00:00:00</td>\n",
       "      <td>R012</td>\n",
       "      <td>-15126671.0</td>\n",
       "      <td>-2164080.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>158640</th>\n",
       "      <td>R262B</td>\n",
       "      <td>07/01/2017</td>\n",
       "      <td>187572</td>\n",
       "      <td>128199</td>\n",
       "      <td>05-00-03</td>\n",
       "      <td>00:22:00</td>\n",
       "      <td>R195</td>\n",
       "      <td>-7528642.0</td>\n",
       "      <td>-1613261.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51128</th>\n",
       "      <td>N072</td>\n",
       "      <td>07/08/2017</td>\n",
       "      <td>7716394</td>\n",
       "      <td>1741481</td>\n",
       "      <td>05-00-03</td>\n",
       "      <td>00:00:00</td>\n",
       "      <td>R012</td>\n",
       "      <td>-15146320.0</td>\n",
       "      <td>-2165963.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>159844</th>\n",
       "      <td>R262B</td>\n",
       "      <td>07/08/2017</td>\n",
       "      <td>188407</td>\n",
       "      <td>128844</td>\n",
       "      <td>05-00-03</td>\n",
       "      <td>00:22:00</td>\n",
       "      <td>R195</td>\n",
       "      <td>-7535716.0</td>\n",
       "      <td>-1613800.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51178</th>\n",
       "      <td>N072</td>\n",
       "      <td>07/15/2017</td>\n",
       "      <td>7724306</td>\n",
       "      <td>1742659</td>\n",
       "      <td>05-00-03</td>\n",
       "      <td>00:00:00</td>\n",
       "      <td>R012</td>\n",
       "      <td>-15166734.0</td>\n",
       "      <td>-2167521.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>160588</th>\n",
       "      <td>R262B</td>\n",
       "      <td>07/15/2017</td>\n",
       "      <td>188893</td>\n",
       "      <td>129040</td>\n",
       "      <td>05-00-03</td>\n",
       "      <td>00:22:00</td>\n",
       "      <td>R195</td>\n",
       "      <td>-7543398.0</td>\n",
       "      <td>-1614863.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>52222</th>\n",
       "      <td>N072</td>\n",
       "      <td>07/22/2017</td>\n",
       "      <td>7732488</td>\n",
       "      <td>1743923</td>\n",
       "      <td>05-00-03</td>\n",
       "      <td>00:00:00</td>\n",
       "      <td>R012</td>\n",
       "      <td>-15183748.0</td>\n",
       "      <td>-2169006.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>162802</th>\n",
       "      <td>R262B</td>\n",
       "      <td>07/22/2017</td>\n",
       "      <td>189028</td>\n",
       "      <td>129128</td>\n",
       "      <td>05-00-03</td>\n",
       "      <td>00:22:00</td>\n",
       "      <td>R195</td>\n",
       "      <td>-7552242.0</td>\n",
       "      <td>-1615779.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>52608</th>\n",
       "      <td>N072</td>\n",
       "      <td>07/29/2017</td>\n",
       "      <td>7741505</td>\n",
       "      <td>1744923</td>\n",
       "      <td>05-00-03</td>\n",
       "      <td>00:00:00</td>\n",
       "      <td>R012</td>\n",
       "      <td>-15201347.0</td>\n",
       "      <td>-2170667.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>164699</th>\n",
       "      <td>R262B</td>\n",
       "      <td>07/29/2017</td>\n",
       "      <td>190166</td>\n",
       "      <td>129870</td>\n",
       "      <td>05-00-03</td>\n",
       "      <td>00:22:00</td>\n",
       "      <td>R195</td>\n",
       "      <td>-7559856.0</td>\n",
       "      <td>-1616036.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>18574 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          C/A        DATE     ENTRIES       EXITS       SCP      TIME  UNIT  \\\n",
       "551      A006  07/01/2017     2907077     4959065  00-00-00  02:00:00  R079   \n",
       "1145     A010  07/01/2017     2516942     1033358  00-00-00  00:00:00  R080   \n",
       "3928     A029  07/01/2017     3756108    13042316  00-00-00  00:00:00  R082   \n",
       "5414     A035  07/01/2017      782105     2140820  00-00-00  01:00:00  R170   \n",
       "7193     A046  07/01/2017     3698774      354336  00-00-00  01:00:00  R463   \n",
       "8943     A050  07/01/2017     3775981     5370524  00-00-00  01:00:00  R088   \n",
       "9898     A055  07/01/2017      962037      331390  00-00-00  00:00:00  R227   \n",
       "11031    A064  07/01/2017     4921806     3522946  00-00-00  00:00:00  R311   \n",
       "11158    A066  07/01/2017  1726406605  1762181972  00-00-00  05:00:00  R118   \n",
       "11159    A066  07/01/2017  1726406521  1762182108  00-00-00  09:00:00  R118   \n",
       "11160    A066  07/01/2017  1726406039  1762182420  00-00-00  13:00:00  R118   \n",
       "11161    A066  07/01/2017  1726404900  1762182757  00-00-00  17:00:00  R118   \n",
       "11162    A066  07/01/2017  1726403809  1762183056  00-00-00  21:00:00  R118   \n",
       "11163    A066  07/02/2017  1726403359  1762183280  00-00-00  01:00:00  R118   \n",
       "11164    A066  07/02/2017  1726403309  1762183315  00-00-00  05:00:00  R118   \n",
       "11165    A066  07/02/2017  1726403250  1762183457  00-00-00  09:00:00  R118   \n",
       "11166    A066  07/02/2017  1726402808  1762183792  00-00-00  13:00:00  R118   \n",
       "11167    A066  07/02/2017  1726401854  1762184261  00-00-00  17:00:00  R118   \n",
       "11168    A066  07/02/2017  1726400746  1762184689  00-00-00  21:00:00  R118   \n",
       "11169    A066  07/03/2017  1726400287  1762184866  00-00-00  01:00:00  R118   \n",
       "11170    A066  07/03/2017  1726400264  1762184887  00-00-00  05:00:00  R118   \n",
       "11171    A066  07/03/2017  1726400163  1762185085  00-00-00  09:00:00  R118   \n",
       "11172    A066  07/03/2017  1726399659  1762185439  00-00-00  13:00:00  R118   \n",
       "11173    A066  07/03/2017  1726398336  1762185751  00-00-00  17:00:00  R118   \n",
       "11174    A066  07/03/2017  1726397052  1762186059  00-00-00  21:00:00  R118   \n",
       "11175    A066  07/04/2017  1726396632  1762186178  00-00-00  01:00:00  R118   \n",
       "11176    A066  07/04/2017  1726396603  1762186198  00-00-00  05:00:00  R118   \n",
       "11177    A066  07/04/2017  1726396542  1762186288  00-00-00  09:00:00  R118   \n",
       "11178    A066  07/04/2017  1726396219  1762186585  00-00-00  13:00:00  R118   \n",
       "11179    A066  07/04/2017  1726395376  1762186999  00-00-00  17:00:00  R118   \n",
       "...       ...         ...         ...         ...       ...       ...   ...   \n",
       "158514  R262B  07/01/2017       30343        7221  05-00-00  00:22:00  R195   \n",
       "5485     A037  07/08/2017       23500       12641  05-00-00  01:00:00  R170   \n",
       "51002    N072  07/08/2017       37661      117297  05-00-00  00:00:00  R012   \n",
       "159718  R262B  07/08/2017       30937        7436  05-00-00  00:22:00  R195   \n",
       "51052    N072  07/15/2017       39061      123681  05-00-00  00:00:00  R012   \n",
       "160462  R262B  07/15/2017       31268        7540  05-00-00  00:22:00  R195   \n",
       "52093    N072  07/22/2017       40494      130306  05-00-00  00:00:00  R012   \n",
       "162676  R262B  07/22/2017       31300        7576  05-00-00  00:22:00  R195   \n",
       "52458    N072  07/29/2017       42123      136119  05-00-00  00:00:00  R012   \n",
       "164573  R262B  07/29/2017       32072        7786  05-00-00  00:22:00  R195   \n",
       "158556  R262B  07/01/2017      535053       70530  05-00-01  00:22:00  R195   \n",
       "159760  R262B  07/08/2017      535818       70679  05-00-01  00:22:00  R195   \n",
       "160504  R262B  07/15/2017      536209       70743  05-00-01  00:22:00  R195   \n",
       "162718  R262B  07/22/2017      536307       70764  05-00-01  00:22:00  R195   \n",
       "164615  R262B  07/29/2017      537220       70924  05-00-01  00:22:00  R195   \n",
       "158598  R262B  07/01/2017      183183       63662  05-00-02  00:22:00  R195   \n",
       "159802  R262B  07/08/2017      184151       63983  05-00-02  00:22:00  R195   \n",
       "160546  R262B  07/15/2017      184620       64065  05-00-02  00:22:00  R195   \n",
       "162760  R262B  07/22/2017      184745       64104  05-00-02  00:22:00  R195   \n",
       "164657  R262B  07/29/2017      185934       64467  05-00-02  00:22:00  R195   \n",
       "51353    N072  07/01/2017     7709411     1740564  05-00-03  00:00:00  R012   \n",
       "158640  R262B  07/01/2017      187572      128199  05-00-03  00:22:00  R195   \n",
       "51128    N072  07/08/2017     7716394     1741481  05-00-03  00:00:00  R012   \n",
       "159844  R262B  07/08/2017      188407      128844  05-00-03  00:22:00  R195   \n",
       "51178    N072  07/15/2017     7724306     1742659  05-00-03  00:00:00  R012   \n",
       "160588  R262B  07/15/2017      188893      129040  05-00-03  00:22:00  R195   \n",
       "52222    N072  07/22/2017     7732488     1743923  05-00-03  00:00:00  R012   \n",
       "162802  R262B  07/22/2017      189028      129128  05-00-03  00:22:00  R195   \n",
       "52608    N072  07/29/2017     7741505     1744923  05-00-03  00:00:00  R012   \n",
       "164699  R262B  07/29/2017      190166      129870  05-00-03  00:22:00  R195   \n",
       "\n",
       "        entries_new    exits_new  \n",
       "551       -843666.0    4906003.0  \n",
       "1145      -398606.0   -3939574.0  \n",
       "3928     -7509253.0    9278707.0  \n",
       "5414     -4919195.0    -704930.0  \n",
       "7193   -366504904.0 -454018867.0  \n",
       "8943     -3077009.0    1233947.0  \n",
       "9898     -2815755.0   -5041250.0  \n",
       "11031    -6527501.0   -7390231.0  \n",
       "11158         -53.0         38.0  \n",
       "11159         -84.0        136.0  \n",
       "11160        -482.0        312.0  \n",
       "11161       -1139.0        337.0  \n",
       "11162       -1091.0        299.0  \n",
       "11163        -450.0        224.0  \n",
       "11164         -50.0         35.0  \n",
       "11165         -59.0        142.0  \n",
       "11166        -442.0        335.0  \n",
       "11167        -954.0        469.0  \n",
       "11168       -1108.0        428.0  \n",
       "11169        -459.0        177.0  \n",
       "11170         -23.0         21.0  \n",
       "11171        -101.0        198.0  \n",
       "11172        -504.0        354.0  \n",
       "11173       -1323.0        312.0  \n",
       "11174       -1284.0        308.0  \n",
       "11175        -420.0        119.0  \n",
       "11176         -29.0         20.0  \n",
       "11177         -61.0         90.0  \n",
       "11178        -323.0        297.0  \n",
       "11179        -843.0        414.0  \n",
       "...             ...          ...  \n",
       "158514      -7258.0    -110016.0  \n",
       "5485        -7377.0       5225.0  \n",
       "51002      -16407.0      87366.0  \n",
       "159718      -8076.0    -116193.0  \n",
       "51052      -48344.0      76302.0  \n",
       "160462      -9165.0    -122681.0  \n",
       "52093      -78272.0      66553.0  \n",
       "162676     -10748.0    -128455.0  \n",
       "52458     -107109.0      56260.0  \n",
       "164573     -11720.0    -134632.0  \n",
       "158556   -5961572.0   -4733993.0  \n",
       "159760   -5966536.0   -4740713.0  \n",
       "160504   -5971825.0   -4747565.0  \n",
       "162718   -5977868.0   -4753603.0  \n",
       "164615   -5983090.0   -4759701.0  \n",
       "158598   -4943592.0   -1636539.0  \n",
       "159802   -4950049.0   -1640024.0  \n",
       "160546   -4957182.0   -1643831.0  \n",
       "162760   -4965332.0   -1647064.0  \n",
       "164657   -4972293.0   -1650049.0  \n",
       "51353   -15126671.0   -2164080.0  \n",
       "158640   -7528642.0   -1613261.0  \n",
       "51128   -15146320.0   -2165963.0  \n",
       "159844   -7535716.0   -1613800.0  \n",
       "51178   -15166734.0   -2167521.0  \n",
       "160588   -7543398.0   -1614863.0  \n",
       "52222   -15183748.0   -2169006.0  \n",
       "162802   -7552242.0   -1615779.0  \n",
       "52608   -15201347.0   -2170667.0  \n",
       "164699   -7559856.0   -1616036.0  \n",
       "\n",
       "[18574 rows x 9 columns]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "neg = data_individual_counts_July[(data_individual_counts_July.entries_new<0)]\n",
    "neg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>C/A</th>\n",
       "      <th>DATE</th>\n",
       "      <th>ENTRIES</th>\n",
       "      <th>EXITS</th>\n",
       "      <th>SCP</th>\n",
       "      <th>TIME</th>\n",
       "      <th>UNIT</th>\n",
       "      <th>entries_new</th>\n",
       "      <th>exits_new</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1145</th>\n",
       "      <td>A010</td>\n",
       "      <td>07/01/2017</td>\n",
       "      <td>2516942</td>\n",
       "      <td>1033358</td>\n",
       "      <td>00-00-00</td>\n",
       "      <td>00:00:00</td>\n",
       "      <td>R080</td>\n",
       "      <td>-398606.0</td>\n",
       "      <td>-3939574.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1145</th>\n",
       "      <td>A010</td>\n",
       "      <td>07/21/2017</td>\n",
       "      <td>2566895</td>\n",
       "      <td>1062971</td>\n",
       "      <td>00-00-00</td>\n",
       "      <td>20:00:00</td>\n",
       "      <td>R080</td>\n",
       "      <td>1037.0</td>\n",
       "      <td>356.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1145</th>\n",
       "      <td>A010</td>\n",
       "      <td>08/03/2017</td>\n",
       "      <td>2596824</td>\n",
       "      <td>1081126</td>\n",
       "      <td>00-00-00</td>\n",
       "      <td>00:00:00</td>\n",
       "      <td>R080</td>\n",
       "      <td>551.0</td>\n",
       "      <td>134.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1145</th>\n",
       "      <td>A010</td>\n",
       "      <td>06/25/2017</td>\n",
       "      <td>13825213</td>\n",
       "      <td>5105116</td>\n",
       "      <td>00-00-01</td>\n",
       "      <td>20:00:00</td>\n",
       "      <td>R080</td>\n",
       "      <td>441.0</td>\n",
       "      <td>146.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1145</th>\n",
       "      <td>A010</td>\n",
       "      <td>07/09/2017</td>\n",
       "      <td>13852846</td>\n",
       "      <td>5116606</td>\n",
       "      <td>00-00-01</td>\n",
       "      <td>20:00:00</td>\n",
       "      <td>R080</td>\n",
       "      <td>357.0</td>\n",
       "      <td>144.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1145</th>\n",
       "      <td>A007</td>\n",
       "      <td>07/27/2017</td>\n",
       "      <td>4222395</td>\n",
       "      <td>1797707</td>\n",
       "      <td>01-06-02</td>\n",
       "      <td>02:00:00</td>\n",
       "      <td>R079</td>\n",
       "      <td>90.0</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       C/A        DATE   ENTRIES    EXITS       SCP      TIME  UNIT  \\\n",
       "1145  A010  07/01/2017   2516942  1033358  00-00-00  00:00:00  R080   \n",
       "1145  A010  07/21/2017   2566895  1062971  00-00-00  20:00:00  R080   \n",
       "1145  A010  08/03/2017   2596824  1081126  00-00-00  00:00:00  R080   \n",
       "1145  A010  06/25/2017  13825213  5105116  00-00-01  20:00:00  R080   \n",
       "1145  A010  07/09/2017  13852846  5116606  00-00-01  20:00:00  R080   \n",
       "1145  A007  07/27/2017   4222395  1797707  01-06-02  02:00:00  R079   \n",
       "\n",
       "      entries_new  exits_new  \n",
       "1145    -398606.0 -3939574.0  \n",
       "1145       1037.0      356.0  \n",
       "1145        551.0      134.0  \n",
       "1145        441.0      146.0  \n",
       "1145        357.0      144.0  \n",
       "1145         90.0        5.0  "
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "value = 1145\n",
    "\n",
    "data_individual_counts.loc[1145]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(20,10))\n",
    "cutoff = 5000\n",
    "plt.plot(data_individual_counts_nonnegative.SCP[data_individual_counts_nonnegative.entries_new<cutoff],data_individual_counts_nonnegative.entries_new[data_individual_counts_nonnegative.entries_new<cutoff],'.')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Saving Point 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_individual_counts_nonnegative.to_csv('MTA_data_individual_counts_nonnegative.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_individual_counts_nonnegative = pd.read_csv('MTA_data_individual_counts_nonnegative.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Adding coordinates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "geo = pd.read_csv(\"https://raw.githubusercontent.com/chriswhong/nycturnstiles/master/geocoded.csv\",header=None)\n",
    "geo.columns = [\"REMOTE\",\"VALUES\",\"NAME\",\"Z\",\"SRT\",\"LAT\",\"LONG\"] #Made up these names but should change them"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>REMOTE</th>\n",
       "      <th>VALUES</th>\n",
       "      <th>NAME</th>\n",
       "      <th>Z</th>\n",
       "      <th>SRT</th>\n",
       "      <th>LAT</th>\n",
       "      <th>LONG</th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>Unnamed: 0.1</th>\n",
       "      <th>C/A</th>\n",
       "      <th>DATE</th>\n",
       "      <th>ENTRIES</th>\n",
       "      <th>EXITS</th>\n",
       "      <th>SCP</th>\n",
       "      <th>TIME</th>\n",
       "      <th>UNIT</th>\n",
       "      <th>entries_new</th>\n",
       "      <th>exits_new</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>R470</td>\n",
       "      <td>X002</td>\n",
       "      <td>ELTINGVILLE PK</td>\n",
       "      <td>Z</td>\n",
       "      <td>SRT</td>\n",
       "      <td>40.544600</td>\n",
       "      <td>-74.164581</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>R544</td>\n",
       "      <td>PTH02</td>\n",
       "      <td>HARRISON</td>\n",
       "      <td>1</td>\n",
       "      <td>PTH</td>\n",
       "      <td>40.738879</td>\n",
       "      <td>-74.155533</td>\n",
       "      <td>113789.0</td>\n",
       "      <td>110114.0</td>\n",
       "      <td>PTH02</td>\n",
       "      <td>06/24/2017</td>\n",
       "      <td>128024.0</td>\n",
       "      <td>13783.0</td>\n",
       "      <td>00-00-00</td>\n",
       "      <td>12:32:58</td>\n",
       "      <td>R544</td>\n",
       "      <td>44.0</td>\n",
       "      <td>13.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>R544</td>\n",
       "      <td>PTH02</td>\n",
       "      <td>HARRISON</td>\n",
       "      <td>1</td>\n",
       "      <td>PTH</td>\n",
       "      <td>40.738879</td>\n",
       "      <td>-74.155533</td>\n",
       "      <td>113790.0</td>\n",
       "      <td>110115.0</td>\n",
       "      <td>PTH02</td>\n",
       "      <td>06/24/2017</td>\n",
       "      <td>128518.0</td>\n",
       "      <td>13831.0</td>\n",
       "      <td>00-00-00</td>\n",
       "      <td>16:38:33</td>\n",
       "      <td>R544</td>\n",
       "      <td>494.0</td>\n",
       "      <td>48.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>R544</td>\n",
       "      <td>PTH02</td>\n",
       "      <td>HARRISON</td>\n",
       "      <td>1</td>\n",
       "      <td>PTH</td>\n",
       "      <td>40.738879</td>\n",
       "      <td>-74.155533</td>\n",
       "      <td>113791.0</td>\n",
       "      <td>110116.0</td>\n",
       "      <td>PTH02</td>\n",
       "      <td>06/24/2017</td>\n",
       "      <td>128552.0</td>\n",
       "      <td>13835.0</td>\n",
       "      <td>00-00-00</td>\n",
       "      <td>20:50:33</td>\n",
       "      <td>R544</td>\n",
       "      <td>34.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>R544</td>\n",
       "      <td>PTH02</td>\n",
       "      <td>HARRISON</td>\n",
       "      <td>1</td>\n",
       "      <td>PTH</td>\n",
       "      <td>40.738879</td>\n",
       "      <td>-74.155533</td>\n",
       "      <td>113792.0</td>\n",
       "      <td>110117.0</td>\n",
       "      <td>PTH02</td>\n",
       "      <td>06/25/2017</td>\n",
       "      <td>128558.0</td>\n",
       "      <td>13842.0</td>\n",
       "      <td>00-00-00</td>\n",
       "      <td>01:02:33</td>\n",
       "      <td>R544</td>\n",
       "      <td>6.0</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  REMOTE VALUES            NAME  Z  SRT        LAT       LONG  Unnamed: 0  \\\n",
       "0   R470   X002  ELTINGVILLE PK  Z  SRT  40.544600 -74.164581         NaN   \n",
       "1   R544  PTH02        HARRISON  1  PTH  40.738879 -74.155533    113789.0   \n",
       "2   R544  PTH02        HARRISON  1  PTH  40.738879 -74.155533    113790.0   \n",
       "3   R544  PTH02        HARRISON  1  PTH  40.738879 -74.155533    113791.0   \n",
       "4   R544  PTH02        HARRISON  1  PTH  40.738879 -74.155533    113792.0   \n",
       "\n",
       "   Unnamed: 0.1    C/A        DATE   ENTRIES    EXITS       SCP      TIME  \\\n",
       "0           NaN    NaN         NaN       NaN      NaN       NaN       NaN   \n",
       "1      110114.0  PTH02  06/24/2017  128024.0  13783.0  00-00-00  12:32:58   \n",
       "2      110115.0  PTH02  06/24/2017  128518.0  13831.0  00-00-00  16:38:33   \n",
       "3      110116.0  PTH02  06/24/2017  128552.0  13835.0  00-00-00  20:50:33   \n",
       "4      110117.0  PTH02  06/25/2017  128558.0  13842.0  00-00-00  01:02:33   \n",
       "\n",
       "   UNIT  entries_new  exits_new  \n",
       "0   NaN          NaN        NaN  \n",
       "1  R544         44.0       13.0  \n",
       "2  R544        494.0       48.0  \n",
       "3  R544         34.0        4.0  \n",
       "4  R544          6.0        7.0  "
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.merge(geo, data_individual_counts_nonnegative, how=\"outer\", left_on=\"REMOTE\",right_on=\"UNIT\")\n",
    "df.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_temporal = pd.merge(geo, data_individual_counts_nonnegative, how=\"outer\", left_on=\"REMOTE\",right_on=\"UNIT\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index([u'REMOTE', u'VALUES', u'NAME', u'Z', u'SRT', u'LAT', u'LONG',\n",
       "       u'Unnamed: 0', u'Unnamed: 0.1', u'C/A', u'DATE', u'ENTRIES', u'EXITS',\n",
       "       u'SCP', u'TIME', u'UNIT', u'entries_new', u'exits_new'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Splitting data into exits and entries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "entries = df.drop('EXITS', axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "exits = df.drop('ENTRIES', axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Reading Taxi Zones"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "taxi_zones = gpd.read_file('Taxi_Zone_Shapefile/taxi_zones.shp')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OBJECTID</th>\n",
       "      <th>Shape_Leng</th>\n",
       "      <th>Shape_Area</th>\n",
       "      <th>zone</th>\n",
       "      <th>LocationID</th>\n",
       "      <th>borough</th>\n",
       "      <th>geometry</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0.116357</td>\n",
       "      <td>0.000782</td>\n",
       "      <td>Newark Airport</td>\n",
       "      <td>1</td>\n",
       "      <td>EWR</td>\n",
       "      <td>POLYGON ((933100.9183527103 192536.0856972019,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>0.433470</td>\n",
       "      <td>0.004866</td>\n",
       "      <td>Jamaica Bay</td>\n",
       "      <td>2</td>\n",
       "      <td>Queens</td>\n",
       "      <td>(POLYGON ((1033269.243591294 172126.0078125, 1...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>0.084341</td>\n",
       "      <td>0.000314</td>\n",
       "      <td>Allerton/Pelham Gardens</td>\n",
       "      <td>3</td>\n",
       "      <td>Bronx</td>\n",
       "      <td>POLYGON ((1026308.769506663 256767.6975403726,...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   OBJECTID  Shape_Leng  Shape_Area                     zone  LocationID  \\\n",
       "0         1    0.116357    0.000782           Newark Airport           1   \n",
       "1         2    0.433470    0.004866              Jamaica Bay           2   \n",
       "2         3    0.084341    0.000314  Allerton/Pelham Gardens           3   \n",
       "\n",
       "  borough                                           geometry  \n",
       "0     EWR  POLYGON ((933100.9183527103 192536.0856972019,...  \n",
       "1  Queens  (POLYGON ((1033269.243591294 172126.0078125, 1...  \n",
       "2   Bronx  POLYGON ((1026308.769506663 256767.6975403726,...  "
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "taxi_zones.head(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Creating geodataframe mta turnstile dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "crs = {'init' :'epsg:4326'}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "geometry = [Point(xy) for xy in zip(exits.LONG, exits.LAT)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "exits_gdf = gpd.GeoDataFrame(exits, geometry=geometry, crs=crs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "exits_gdf = exits_gdf.drop(['LAT','LONG'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "geometry = [Point(xy) for xy in zip(entries.LONG, entries.LAT)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "entries_gdf = gpd.GeoDataFrame(entries, geometry=geometry, crs=crs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "entries_gdf = entries_gdf.drop(['LAT','LONG'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{u'datum': u'NAD83',\n",
       " u'lat_0': 40.16666666666666,\n",
       " u'lat_1': 40.66666666666666,\n",
       " u'lat_2': 41.03333333333333,\n",
       " u'lon_0': -74,\n",
       " u'no_defs': True,\n",
       " u'proj': u'lcc',\n",
       " u'units': u'us-ft',\n",
       " u'x_0': 300000,\n",
       " u'y_0': 0}"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "taxi_zones.crs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "taxi_zones = taxi_zones.to_crs(epsg=4326)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OBJECTID</th>\n",
       "      <th>Shape_Leng</th>\n",
       "      <th>Shape_Area</th>\n",
       "      <th>zone</th>\n",
       "      <th>LocationID</th>\n",
       "      <th>borough</th>\n",
       "      <th>geometry</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0.116357</td>\n",
       "      <td>0.000782</td>\n",
       "      <td>Newark Airport</td>\n",
       "      <td>1</td>\n",
       "      <td>EWR</td>\n",
       "      <td>POLYGON ((-74.18445300000005 40.69499600003324...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>0.433470</td>\n",
       "      <td>0.004866</td>\n",
       "      <td>Jamaica Bay</td>\n",
       "      <td>2</td>\n",
       "      <td>Queens</td>\n",
       "      <td>(POLYGON ((-73.82337597260654 40.6389870472100...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>0.084341</td>\n",
       "      <td>0.000314</td>\n",
       "      <td>Allerton/Pelham Gardens</td>\n",
       "      <td>3</td>\n",
       "      <td>Bronx</td>\n",
       "      <td>POLYGON ((-73.84792614099977 40.87134223403326...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   OBJECTID  Shape_Leng  Shape_Area                     zone  LocationID  \\\n",
       "0         1    0.116357    0.000782           Newark Airport           1   \n",
       "1         2    0.433470    0.004866              Jamaica Bay           2   \n",
       "2         3    0.084341    0.000314  Allerton/Pelham Gardens           3   \n",
       "\n",
       "  borough                                           geometry  \n",
       "0     EWR  POLYGON ((-74.18445300000005 40.69499600003324...  \n",
       "1  Queens  (POLYGON ((-73.82337597260654 40.6389870472100...  \n",
       "2   Bronx  POLYGON ((-73.84792614099977 40.87134223403326...  "
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "taxi_zones.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Warning: CRS does not match!\n"
     ]
    }
   ],
   "source": [
    "mta_with_taxi_zone_exits = gpd.sjoin(exits_gdf, taxi_zones, how=\"right\", op='within')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index_left</th>\n",
       "      <th>REMOTE</th>\n",
       "      <th>VALUES</th>\n",
       "      <th>NAME</th>\n",
       "      <th>Z</th>\n",
       "      <th>SRT</th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>Unnamed: 0.1</th>\n",
       "      <th>C/A</th>\n",
       "      <th>DATE</th>\n",
       "      <th>...</th>\n",
       "      <th>UNIT</th>\n",
       "      <th>entries_new</th>\n",
       "      <th>exits_new</th>\n",
       "      <th>OBJECTID</th>\n",
       "      <th>Shape_Leng</th>\n",
       "      <th>Shape_Area</th>\n",
       "      <th>zone</th>\n",
       "      <th>LocationID</th>\n",
       "      <th>borough</th>\n",
       "      <th>geometry</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>index_right</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2190729.0</td>\n",
       "      <td>R430</td>\n",
       "      <td>R727</td>\n",
       "      <td>PELHAM PARKWAY</td>\n",
       "      <td>5</td>\n",
       "      <td>IRT</td>\n",
       "      <td>325368.0</td>\n",
       "      <td>194325.0</td>\n",
       "      <td>R727</td>\n",
       "      <td>07/08/2017</td>\n",
       "      <td>...</td>\n",
       "      <td>R430</td>\n",
       "      <td>87.0</td>\n",
       "      <td>155.0</td>\n",
       "      <td>3</td>\n",
       "      <td>0.084341</td>\n",
       "      <td>0.000314</td>\n",
       "      <td>Allerton/Pelham Gardens</td>\n",
       "      <td>3</td>\n",
       "      <td>Bronx</td>\n",
       "      <td>POLYGON ((-73.84792614099977 40.87134223403326...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2190793.0</td>\n",
       "      <td>R430</td>\n",
       "      <td>R727</td>\n",
       "      <td>PELHAM PARKWAY</td>\n",
       "      <td>5</td>\n",
       "      <td>IRT</td>\n",
       "      <td>325432.0</td>\n",
       "      <td>195042.0</td>\n",
       "      <td>R727</td>\n",
       "      <td>07/19/2017</td>\n",
       "      <td>...</td>\n",
       "      <td>R430</td>\n",
       "      <td>17.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>3</td>\n",
       "      <td>0.084341</td>\n",
       "      <td>0.000314</td>\n",
       "      <td>Allerton/Pelham Gardens</td>\n",
       "      <td>3</td>\n",
       "      <td>Bronx</td>\n",
       "      <td>POLYGON ((-73.84792614099977 40.87134223403326...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2 rows × 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             index_left REMOTE VALUES            NAME  Z  SRT  Unnamed: 0  \\\n",
       "index_right                                                                 \n",
       "2             2190729.0   R430   R727  PELHAM PARKWAY  5  IRT    325368.0   \n",
       "2             2190793.0   R430   R727  PELHAM PARKWAY  5  IRT    325432.0   \n",
       "\n",
       "             Unnamed: 0.1   C/A        DATE  \\\n",
       "index_right                                   \n",
       "2                194325.0  R727  07/08/2017   \n",
       "2                195042.0  R727  07/19/2017   \n",
       "\n",
       "                                   ...                          UNIT  \\\n",
       "index_right                        ...                                 \n",
       "2                                  ...                          R430   \n",
       "2                                  ...                          R430   \n",
       "\n",
       "            entries_new exits_new OBJECTID  Shape_Leng  Shape_Area  \\\n",
       "index_right                                                          \n",
       "2                  87.0     155.0        3    0.084341    0.000314   \n",
       "2                  17.0      24.0        3    0.084341    0.000314   \n",
       "\n",
       "                                zone  LocationID  borough  \\\n",
       "index_right                                                 \n",
       "2            Allerton/Pelham Gardens           3    Bronx   \n",
       "2            Allerton/Pelham Gardens           3    Bronx   \n",
       "\n",
       "                                                      geometry  \n",
       "index_right                                                     \n",
       "2            POLYGON ((-73.84792614099977 40.87134223403326...  \n",
       "2            POLYGON ((-73.84792614099977 40.87134223403326...  \n",
       "\n",
       "[2 rows x 23 columns]"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mta_with_taxi_zone_exits.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Warning: CRS does not match!\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index_left</th>\n",
       "      <th>REMOTE</th>\n",
       "      <th>VALUES</th>\n",
       "      <th>NAME</th>\n",
       "      <th>Z</th>\n",
       "      <th>SRT</th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>Unnamed: 0.1</th>\n",
       "      <th>C/A</th>\n",
       "      <th>DATE</th>\n",
       "      <th>...</th>\n",
       "      <th>UNIT</th>\n",
       "      <th>entries_new</th>\n",
       "      <th>exits_new</th>\n",
       "      <th>OBJECTID</th>\n",
       "      <th>Shape_Leng</th>\n",
       "      <th>Shape_Area</th>\n",
       "      <th>zone</th>\n",
       "      <th>LocationID</th>\n",
       "      <th>borough</th>\n",
       "      <th>geometry</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>index_right</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2190729.0</td>\n",
       "      <td>R430</td>\n",
       "      <td>R727</td>\n",
       "      <td>PELHAM PARKWAY</td>\n",
       "      <td>5</td>\n",
       "      <td>IRT</td>\n",
       "      <td>325368.0</td>\n",
       "      <td>194325.0</td>\n",
       "      <td>R727</td>\n",
       "      <td>07/08/2017</td>\n",
       "      <td>...</td>\n",
       "      <td>R430</td>\n",
       "      <td>87.0</td>\n",
       "      <td>155.0</td>\n",
       "      <td>3</td>\n",
       "      <td>0.084341</td>\n",
       "      <td>0.000314</td>\n",
       "      <td>Allerton/Pelham Gardens</td>\n",
       "      <td>3</td>\n",
       "      <td>Bronx</td>\n",
       "      <td>POLYGON ((-73.84792614099977 40.87134223403326...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2190793.0</td>\n",
       "      <td>R430</td>\n",
       "      <td>R727</td>\n",
       "      <td>PELHAM PARKWAY</td>\n",
       "      <td>5</td>\n",
       "      <td>IRT</td>\n",
       "      <td>325432.0</td>\n",
       "      <td>195042.0</td>\n",
       "      <td>R727</td>\n",
       "      <td>07/19/2017</td>\n",
       "      <td>...</td>\n",
       "      <td>R430</td>\n",
       "      <td>17.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>3</td>\n",
       "      <td>0.084341</td>\n",
       "      <td>0.000314</td>\n",
       "      <td>Allerton/Pelham Gardens</td>\n",
       "      <td>3</td>\n",
       "      <td>Bronx</td>\n",
       "      <td>POLYGON ((-73.84792614099977 40.87134223403326...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2 rows × 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             index_left REMOTE VALUES            NAME  Z  SRT  Unnamed: 0  \\\n",
       "index_right                                                                 \n",
       "2             2190729.0   R430   R727  PELHAM PARKWAY  5  IRT    325368.0   \n",
       "2             2190793.0   R430   R727  PELHAM PARKWAY  5  IRT    325432.0   \n",
       "\n",
       "             Unnamed: 0.1   C/A        DATE  \\\n",
       "index_right                                   \n",
       "2                194325.0  R727  07/08/2017   \n",
       "2                195042.0  R727  07/19/2017   \n",
       "\n",
       "                                   ...                          UNIT  \\\n",
       "index_right                        ...                                 \n",
       "2                                  ...                          R430   \n",
       "2                                  ...                          R430   \n",
       "\n",
       "            entries_new exits_new OBJECTID  Shape_Leng  Shape_Area  \\\n",
       "index_right                                                          \n",
       "2                  87.0     155.0        3    0.084341    0.000314   \n",
       "2                  17.0      24.0        3    0.084341    0.000314   \n",
       "\n",
       "                                zone  LocationID  borough  \\\n",
       "index_right                                                 \n",
       "2            Allerton/Pelham Gardens           3    Bronx   \n",
       "2            Allerton/Pelham Gardens           3    Bronx   \n",
       "\n",
       "                                                      geometry  \n",
       "index_right                                                     \n",
       "2            POLYGON ((-73.84792614099977 40.87134223403326...  \n",
       "2            POLYGON ((-73.84792614099977 40.87134223403326...  \n",
       "\n",
       "[2 rows x 23 columns]"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mta_with_taxi_zone_entries = gpd.sjoin(entries_gdf, taxi_zones, how=\"right\", op='within')\n",
    "mta_with_taxi_zone_entries.head(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "### Saving Point 3\n",
    "Run only once. Can be deleted once the files are saved"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-148-76a44851085c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mmta_with_taxi_zone_entries\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'mta_with_taxi_zones_entries.csv'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/anaconda3/envs/GIS/lib/python2.7/site-packages/pandas/core/frame.pyc\u001b[0m in \u001b[0;36mto_csv\u001b[0;34m(self, path_or_buf, sep, na_rep, float_format, columns, header, index, index_label, mode, encoding, compression, quoting, quotechar, line_terminator, chunksize, tupleize_cols, date_format, doublequote, escapechar, decimal)\u001b[0m\n\u001b[1;32m   1381\u001b[0m                                      \u001b[0mdoublequote\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdoublequote\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1382\u001b[0m                                      escapechar=escapechar, decimal=decimal)\n\u001b[0;32m-> 1383\u001b[0;31m         \u001b[0mformatter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msave\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1384\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1385\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mpath_or_buf\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda3/envs/GIS/lib/python2.7/site-packages/pandas/formats/format.pyc\u001b[0m in \u001b[0;36msave\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1473\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwriter\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcsv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwriter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mwriter_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1474\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1475\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_save\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1476\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1477\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda3/envs/GIS/lib/python2.7/site-packages/pandas/formats/format.pyc\u001b[0m in \u001b[0;36m_save\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1574\u001b[0m                 \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1575\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1576\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_save_chunk\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstart_i\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mend_i\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1577\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1578\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_save_chunk\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstart_i\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mend_i\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda3/envs/GIS/lib/python2.7/site-packages/pandas/formats/format.pyc\u001b[0m in \u001b[0;36m_save_chunk\u001b[0;34m(self, start_i, end_i)\u001b[0m\n\u001b[1;32m   1600\u001b[0m                                         quoting=self.quoting)\n\u001b[1;32m   1601\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1602\u001b[0;31m         \u001b[0mlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwrite_csv_rows\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mix\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnlevels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcols\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwriter\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1603\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1604\u001b[0m \u001b[0;31m# from collections import namedtuple\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mpandas/lib.pyx\u001b[0m in \u001b[0;36mpandas.lib.write_csv_rows (pandas/lib.c:20752)\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32m/anaconda3/envs/GIS/lib/python2.7/site-packages/shapely/geometry/base.pyc\u001b[0m in \u001b[0;36m__str__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    236\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    237\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__str__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 238\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwkt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    239\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    240\u001b[0m     \u001b[0;31m# To support pickling\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda3/envs/GIS/lib/python2.7/site-packages/shapely/geometry/base.pyc\u001b[0m in \u001b[0;36mwkt\u001b[0;34m(self, **kw)\u001b[0m\n\u001b[1;32m    365\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mwkt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    366\u001b[0m         \u001b[0;34m\"\"\"WKT representation of the geometry\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 367\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mWKTWriter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlgeos\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwrite\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    368\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    369\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda3/envs/GIS/lib/python2.7/site-packages/shapely/geos.pyc\u001b[0m in \u001b[0;36mwrite\u001b[0;34m(self, geom)\u001b[0m\n\u001b[1;32m    361\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mgeom\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0mNone\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mgeom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_geom\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    362\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Null geometry supports no operations\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 363\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_lgeos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mGEOSWKTWriter_write\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_writer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgeom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_geom\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    364\u001b[0m         \u001b[0mtext\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstring_at\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    365\u001b[0m         \u001b[0mlgeos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mGEOSFree\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "mta_with_taxi_zone_entries.to_csv('mta_with_taxi_zones_entries.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "mta_with_taxi_zone_exits.to_csv('mta_with_taxi_zones_exits.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Spatial Counts (Counts by zone)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "mta_with_taxi_zone_entries = pd.read_csv('mta_with_taxi_zones_entries.csv')\n",
    "mta_with_taxi_zone_exits = pd.read_csv('mta_with_taxi_zones_exits.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Taking only required columns from the mta_with_taxi_zones files\n",
    "mta_with_taxi_zone_entries_short = mta_with_taxi_zone_entries[['LocationID','entries_new']]\n",
    "mta_with_taxi_zone_exits_short = mta_with_taxi_zone_exits[['LocationID','exits_new']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Removing June and August Entries\n",
    "#data_individual_counts_July = data_individual_counts[(data_individual_counts['DATE'] >= '07/01/2017') &\\\n",
    "                                                     #(data_individual_counts['DATE'] < '08/01/2017')]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "mta_entries_bydate_zones = mta_with_taxi_zone_entries_short.groupby(['LocationID']).sum().reset_index()\n",
    "mta_exits_bydate_zones = mta_with_taxi_zone_exits_short.groupby(['LocationID']).sum().reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>LocationID</th>\n",
       "      <th>entries_new</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1663764.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   LocationID  entries_new\n",
       "0           1          NaN\n",
       "1           2          NaN\n",
       "2           3    1663764.0\n",
       "3           4          NaN\n",
       "4           5          NaN"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mta_entries_bydate_zones.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>LocationID</th>\n",
       "      <th>exits_new</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>2458171.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   LocationID  exits_new\n",
       "0           1        NaN\n",
       "1           2        NaN\n",
       "2           3  2458171.0\n",
       "3           4        NaN\n",
       "4           5        NaN"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mta_exits_bydate_zones.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([  1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,\n",
       "        14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,\n",
       "        27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,  39,\n",
       "        40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,  52,\n",
       "        53,  54,  55,  56,  58,  59,  60,  61,  62,  63,  64,  65,  66,\n",
       "        67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,  78,  79,\n",
       "        80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,  91,  92,\n",
       "        93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103, 106, 107,\n",
       "       108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120,\n",
       "       121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133,\n",
       "       134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146,\n",
       "       147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n",
       "       160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172,\n",
       "       173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185,\n",
       "       186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198,\n",
       "       199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211,\n",
       "       212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224,\n",
       "       225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237,\n",
       "       238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250,\n",
       "       251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263])"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mta_exits_bydate_zones.LocationID.unique() #57, 104, 105 - These three zones are missing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Note:\n",
    "After spatial join, I got a total of 260 taxi zones. I looked up this, and found a list of all 263 taxi zones on [this link](https://github.com/toddwschneider/nyc-taxi-data/blob/master/data/taxi-zone-lookup-with-ntacode.csv)\n",
    "I found that the missing ones are have values as the previous ones. (56 and 57 are exactly same. Also 103,104,105 are exactly similar)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Temporal Counts (Counts by zone)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>LocationID</th>\n",
       "      <th>DATE</th>\n",
       "      <th>TIME</th>\n",
       "      <th>COUNTS</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>index_right</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>07/08/2017</td>\n",
       "      <td>13:00:00</td>\n",
       "      <td>155.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>07/19/2017</td>\n",
       "      <td>05:00:00</td>\n",
       "      <td>24.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>07/19/2017</td>\n",
       "      <td>09:00:00</td>\n",
       "      <td>130.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>07/19/2017</td>\n",
       "      <td>13:00:00</td>\n",
       "      <td>149.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>07/19/2017</td>\n",
       "      <td>17:00:00</td>\n",
       "      <td>298.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             LocationID        DATE      TIME  COUNTS\n",
       "index_right                                          \n",
       "2                     3  07/08/2017  13:00:00   155.0\n",
       "2                     3  07/19/2017  05:00:00    24.0\n",
       "2                     3  07/19/2017  09:00:00   130.0\n",
       "2                     3  07/19/2017  13:00:00   149.0\n",
       "2                     3  07/19/2017  17:00:00   298.0"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "spatial_exits = mta_with_taxi_zone_exits[[\"LocationID\",\"DATE\",\"TIME\",\"exits_new\"]]\n",
    "spatial_exits.columns=['LocationID','DATE','TIME','COUNTS']\n",
    "spatial_exits.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>LocationID</th>\n",
       "      <th>DATE</th>\n",
       "      <th>TIME</th>\n",
       "      <th>COUNTS</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>index_right</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>07/08/2017</td>\n",
       "      <td>13:00:00</td>\n",
       "      <td>87.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>07/19/2017</td>\n",
       "      <td>05:00:00</td>\n",
       "      <td>17.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>07/19/2017</td>\n",
       "      <td>09:00:00</td>\n",
       "      <td>500.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>07/19/2017</td>\n",
       "      <td>13:00:00</td>\n",
       "      <td>200.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>07/19/2017</td>\n",
       "      <td>17:00:00</td>\n",
       "      <td>216.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             LocationID        DATE      TIME  COUNTS\n",
       "index_right                                          \n",
       "2                     3  07/08/2017  13:00:00    87.0\n",
       "2                     3  07/19/2017  05:00:00    17.0\n",
       "2                     3  07/19/2017  09:00:00   500.0\n",
       "2                     3  07/19/2017  13:00:00   200.0\n",
       "2                     3  07/19/2017  17:00:00   216.0"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "spatial_entries = mta_with_taxi_zone_entries[[\"LocationID\",\"DATE\",\"TIME\",\"entries_new\"]]\n",
    "spatial_entries.columns=['LocationID','DATE','TIME','COUNTS']\n",
    "spatial_entries.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>10</th>\n",
       "      <th>...</th>\n",
       "      <th>254</th>\n",
       "      <th>255</th>\n",
       "      <th>256</th>\n",
       "      <th>257</th>\n",
       "      <th>258</th>\n",
       "      <th>259</th>\n",
       "      <th>260</th>\n",
       "      <th>261</th>\n",
       "      <th>262</th>\n",
       "      <th>263</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>0 rows × 260 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, ...]\n",
       "Index: []\n",
       "\n",
       "[0 rows x 260 columns]"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "zonenames = taxi_zones.LocationID.unique()\n",
    "zonenames = pd.DataFrame(index = zonenames).transpose()\n",
    "zonenames"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [],
   "source": [
    "begin_date = '2017-06-24'\n",
    "end_date = '2017-08-01'\n",
    "mydates = pd.date_range(begin_date, end_date, freq=\"1min\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [],
   "source": [
    "def spatiotemporal(data,daterange,zonenames):\n",
    "    spatial_grouped = data.groupby([\"LocationID\",\"DATE\",\"TIME\"]).sum()\n",
    "    spatial_grouped = spatial_grouped.reset_index()\n",
    "    spatial_grouped['DateTime'] = pd.to_datetime(spatial_grouped['DATE'] + ' ' + spatial_grouped['TIME'])\n",
    "    spatial_grouped.index=spatial_grouped['DateTime']\n",
    "    spatial_grouped = spatial_grouped[['LocationID','COUNTS']]\n",
    "\n",
    "    result = pd.DataFrame(np.zeros((len(daterange),1)))\n",
    "    result.index=daterange\n",
    "\n",
    "\n",
    "    for loc in spatial_grouped.LocationID.unique(): #taking each LocationID\n",
    "        temp = spatial_grouped[spatial_grouped.LocationID == loc][[\"COUNTS\"]] #choosing only entries\n",
    "        if temp.iloc[0].isnull()[0] == False:\n",
    "            temp.columns = ([loc]) #renaming temporary dataframe to include LocationID in index\n",
    "            result = pd.concat([result, temp], axis=1, join_axes=[result.index]) #appending to DataFrame\n",
    "            result = result.interpolate() #interpolating\n",
    "                \n",
    "        elif temp.iloc[0].isnull()[0] == True:\n",
    "            print(str(loc) + 'begins with NaN')\n",
    "    \n",
    "    result = result.drop([0],axis=1)  \n",
    "    result = result.sort_index(axis=1)\n",
    "    result = result[(result.index >= '07/01/2017') & (result.index < '08/01/2017')]\n",
    "    return result    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>3</th>\n",
       "      <th>7</th>\n",
       "      <th>11</th>\n",
       "      <th>14</th>\n",
       "      <th>17</th>\n",
       "      <th>18</th>\n",
       "      <th>21</th>\n",
       "      <th>22</th>\n",
       "      <th>24</th>\n",
       "      <th>25</th>\n",
       "      <th>...</th>\n",
       "      <th>249</th>\n",
       "      <th>250</th>\n",
       "      <th>254</th>\n",
       "      <th>255</th>\n",
       "      <th>256</th>\n",
       "      <th>257</th>\n",
       "      <th>258</th>\n",
       "      <th>259</th>\n",
       "      <th>260</th>\n",
       "      <th>261</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2017-07-01 00:00:00</th>\n",
       "      <td>143.500000</td>\n",
       "      <td>5136.0</td>\n",
       "      <td>384.000000</td>\n",
       "      <td>2708.00</td>\n",
       "      <td>2622.0</td>\n",
       "      <td>2058.0</td>\n",
       "      <td>1716.750000</td>\n",
       "      <td>919.000000</td>\n",
       "      <td>2912.0</td>\n",
       "      <td>1814.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>20976.000000</td>\n",
       "      <td>556.00</td>\n",
       "      <td>294.000000</td>\n",
       "      <td>4717.000000</td>\n",
       "      <td>8865.0</td>\n",
       "      <td>1002.000000</td>\n",
       "      <td>1379.000000</td>\n",
       "      <td>1324.750000</td>\n",
       "      <td>3351.7500</td>\n",
       "      <td>6782.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-07-01 00:01:00</th>\n",
       "      <td>142.491667</td>\n",
       "      <td>5073.2</td>\n",
       "      <td>382.566667</td>\n",
       "      <td>2696.75</td>\n",
       "      <td>2592.4</td>\n",
       "      <td>2049.6</td>\n",
       "      <td>1705.104167</td>\n",
       "      <td>916.666667</td>\n",
       "      <td>2896.9</td>\n",
       "      <td>1829.316667</td>\n",
       "      <td>...</td>\n",
       "      <td>20905.966667</td>\n",
       "      <td>548.65</td>\n",
       "      <td>308.366667</td>\n",
       "      <td>4706.429167</td>\n",
       "      <td>8837.4</td>\n",
       "      <td>998.666667</td>\n",
       "      <td>1374.408333</td>\n",
       "      <td>1319.720833</td>\n",
       "      <td>3331.6875</td>\n",
       "      <td>6758.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-07-01 00:02:00</th>\n",
       "      <td>141.483333</td>\n",
       "      <td>5010.4</td>\n",
       "      <td>381.133333</td>\n",
       "      <td>2685.50</td>\n",
       "      <td>2562.8</td>\n",
       "      <td>2041.2</td>\n",
       "      <td>1693.458333</td>\n",
       "      <td>914.333333</td>\n",
       "      <td>2881.8</td>\n",
       "      <td>1844.633333</td>\n",
       "      <td>...</td>\n",
       "      <td>20835.933333</td>\n",
       "      <td>541.30</td>\n",
       "      <td>322.733333</td>\n",
       "      <td>4695.858333</td>\n",
       "      <td>8809.8</td>\n",
       "      <td>995.333333</td>\n",
       "      <td>1369.816667</td>\n",
       "      <td>1314.691667</td>\n",
       "      <td>3311.6250</td>\n",
       "      <td>6735.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-07-01 00:03:00</th>\n",
       "      <td>140.475000</td>\n",
       "      <td>4947.6</td>\n",
       "      <td>379.700000</td>\n",
       "      <td>2674.25</td>\n",
       "      <td>2533.2</td>\n",
       "      <td>2032.8</td>\n",
       "      <td>1681.812500</td>\n",
       "      <td>912.000000</td>\n",
       "      <td>2866.7</td>\n",
       "      <td>1859.950000</td>\n",
       "      <td>...</td>\n",
       "      <td>20765.900000</td>\n",
       "      <td>533.95</td>\n",
       "      <td>337.100000</td>\n",
       "      <td>4685.287500</td>\n",
       "      <td>8782.2</td>\n",
       "      <td>992.000000</td>\n",
       "      <td>1365.225000</td>\n",
       "      <td>1309.662500</td>\n",
       "      <td>3291.5625</td>\n",
       "      <td>6712.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-07-01 00:04:00</th>\n",
       "      <td>139.466667</td>\n",
       "      <td>4884.8</td>\n",
       "      <td>378.266667</td>\n",
       "      <td>2663.00</td>\n",
       "      <td>2503.6</td>\n",
       "      <td>2024.4</td>\n",
       "      <td>1670.166667</td>\n",
       "      <td>909.666667</td>\n",
       "      <td>2851.6</td>\n",
       "      <td>1875.266667</td>\n",
       "      <td>...</td>\n",
       "      <td>20695.866667</td>\n",
       "      <td>526.60</td>\n",
       "      <td>351.466667</td>\n",
       "      <td>4674.716667</td>\n",
       "      <td>8754.6</td>\n",
       "      <td>988.666667</td>\n",
       "      <td>1360.633333</td>\n",
       "      <td>1304.633333</td>\n",
       "      <td>3271.5000</td>\n",
       "      <td>6688.8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 156 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                            3       7           11       14      17      18   \\\n",
       "2017-07-01 00:00:00  143.500000  5136.0  384.000000  2708.00  2622.0  2058.0   \n",
       "2017-07-01 00:01:00  142.491667  5073.2  382.566667  2696.75  2592.4  2049.6   \n",
       "2017-07-01 00:02:00  141.483333  5010.4  381.133333  2685.50  2562.8  2041.2   \n",
       "2017-07-01 00:03:00  140.475000  4947.6  379.700000  2674.25  2533.2  2032.8   \n",
       "2017-07-01 00:04:00  139.466667  4884.8  378.266667  2663.00  2503.6  2024.4   \n",
       "\n",
       "                             21          22      24           25    ...    \\\n",
       "2017-07-01 00:00:00  1716.750000  919.000000  2912.0  1814.000000   ...     \n",
       "2017-07-01 00:01:00  1705.104167  916.666667  2896.9  1829.316667   ...     \n",
       "2017-07-01 00:02:00  1693.458333  914.333333  2881.8  1844.633333   ...     \n",
       "2017-07-01 00:03:00  1681.812500  912.000000  2866.7  1859.950000   ...     \n",
       "2017-07-01 00:04:00  1670.166667  909.666667  2851.6  1875.266667   ...     \n",
       "\n",
       "                              249     250         254          255     256  \\\n",
       "2017-07-01 00:00:00  20976.000000  556.00  294.000000  4717.000000  8865.0   \n",
       "2017-07-01 00:01:00  20905.966667  548.65  308.366667  4706.429167  8837.4   \n",
       "2017-07-01 00:02:00  20835.933333  541.30  322.733333  4695.858333  8809.8   \n",
       "2017-07-01 00:03:00  20765.900000  533.95  337.100000  4685.287500  8782.2   \n",
       "2017-07-01 00:04:00  20695.866667  526.60  351.466667  4674.716667  8754.6   \n",
       "\n",
       "                             257          258          259        260     261  \n",
       "2017-07-01 00:00:00  1002.000000  1379.000000  1324.750000  3351.7500  6782.0  \n",
       "2017-07-01 00:01:00   998.666667  1374.408333  1319.720833  3331.6875  6758.7  \n",
       "2017-07-01 00:02:00   995.333333  1369.816667  1314.691667  3311.6250  6735.4  \n",
       "2017-07-01 00:03:00   992.000000  1365.225000  1309.662500  3291.5625  6712.1  \n",
       "2017-07-01 00:04:00   988.666667  1360.633333  1304.633333  3271.5000  6688.8  \n",
       "\n",
       "[5 rows x 156 columns]"
      ]
     },
     "execution_count": 143,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "spatiotemporal_entries = spatiotemporal(spatial_entries,mydates,zonenames)\n",
    "spatiotemporal_entries.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [],
   "source": [
    "spatiotemporal_exits = spatiotemporal(spatial_exits,mydates,zonenames)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [],
   "source": [
    "spatiotemporal_entries.to_csv(\"time_series_entries.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [],
   "source": [
    "spatiotemporal_exits.to_csv(\"time_series_exits.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
